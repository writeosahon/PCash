{"version":3,"sources":["base.js"],"names":[],"mappings":"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","file":"base-compiled.js","sourcesContent":["/**\r\n * Created by UTOPIA SOFTWARE on 19/04/2017.\r\n */\r\n\r\n/**\r\n * file provides the \"base\" framework/utilities required to launch the app. E.g. file creates the base namespace which\r\n * the app is built on.\r\n *\r\n * The author uses the terms 'method' and function interchangeably; likewise the terms 'attribute' and 'property' are\r\n * also used interchangeably\r\n **/\r\n\r\nvar utopiasoftware = {\r\n    saveup : {\r\n\r\n        /**\r\n         * method is used to verify a user's phone number. it returns a Promise object. a resolved promise\r\n         * means the phone number was verified; a rejected promise means phone number verification failed.\r\n         *\r\n         * @param phoneNumber\r\n         * @returns {Promise}\r\n         */\r\n        validatePhoneNumber: function(phoneNumber){\r\n\r\n            phoneNumber = \"\" + phoneNumber; // ensure phone number is seen as a string\r\n\r\n            var smsWatcherTimer = null; // holds the timer used to stop the sms watcher\r\n\r\n            var rejectPromise = null; // holds the reject function of the main Promise object\r\n\r\n            if(phoneNumber.startsWith(\"0\")){ // the phone number starts with 0, replace it with international dialing code\r\n                phoneNumber = phoneNumber.replace(\"0\", \"+234\");\r\n            }\r\n            // show a loader message\r\n            $('#phone-verification-modal .modal-message').html(\"Verifying Phone Number...\");\r\n            $('#phone-verification-modal').get(0).show(); // show loader\r\n\r\n            // create the Promise object which will indicate if a phone was verified or not\r\n            var phoneNumberVerifiedPromise = new Promise(function(resolve, reject){\r\n                rejectPromise = reject;\r\n                var randomNumber = \"\"; //holds the random number to be sent in the sms\r\n\r\n                // start listening to the user's sms inbox\r\n                new Promise(function(resolve2, reject2){\r\n                    SMS.startWatch(resolve2, reject2);\r\n                }).\r\n                then(function(){ // intercept any incoming sms\r\n                    return new Promise(function(res, rej){\r\n                        SMS.enableIntercept(true, res, rej);\r\n                    });\r\n                }).\r\n                then(function(){ // sms watch of the user's inbox has been started\r\n                    // add listener for new arriving sms\r\n                    document.addEventListener('onSMSArrive', function(smsEvent){\r\n                        var sms = smsEvent.data;\r\n                        if(sms.address == phoneNumber && sms.body == \"PostCash \" + randomNumber){\r\n                            clearTimeout(smsWatcherTimer); // stop the set timer\r\n                            SMS.stopWatch(function(){}, function(){}); // stop sms watch\r\n                            SMS.enableIntercept(false, function(){}, function(){}); // stop sms intercept\r\n                            document.removeEventListener('onSMSArrive'); // remove sms arrival listener\r\n                            $('#phone-verification-modal').get(0).hide(); // hide loader\r\n                            resolve(); // resolve promise\r\n                        }\r\n                    });\r\n\r\n                    // return a Promise object whaich sends sms to the phoneNumber parameter\r\n                    return new Promise(function(resolve3, reject3){\r\n\r\n                        var randomGen = new Random(Random.engines.nativeMath); // random number generator\r\n\r\n                        for(var i = 0; i < 6; i++){\r\n                            randomNumber += \"\" + randomGen.integer(0, 9);\r\n                        }\r\n                        SMS.sendSMS(phoneNumber, \"PostCash \" + randomNumber, resolve3, reject3);\r\n                    });\r\n                }).\r\n                then(function(){\r\n                    smsWatcherTimer = setTimeout(function(){\r\n                        SMS.stopWatch(function(){}, function(){});\r\n                        SMS.enableIntercept(false, function(){}, function(){}); // stop sms intercept\r\n                        document.removeEventListener('onSMSArrive');\r\n                        $('#phone-verification-modal').get(0).hide(); // hide loader\r\n                        rejectPromise(\"phone number verification failed\"); // reject the promise i.e. verification failed\r\n                    }, 31000);\r\n                }).\r\n                catch(function(){\r\n                    try{\r\n                        clearTimeout(smsWatcherTimer);\r\n                    }\r\n                    catch(err){}\r\n                    SMS.stopWatch(function(){}, function(){});\r\n                    SMS.enableIntercept(false, function(){}, function(){}); // stop sms intercept\r\n                    document.removeEventListener('onSMSArrive');\r\n                    $('#phone-verification-modal').get(0).hide(); // hide loader\r\n                    reject(\"phone number verification failed\");\r\n                });\r\n            });\r\n\r\n            return phoneNumberVerifiedPromise;\r\n        },\r\n\r\n\r\n        /**\r\n         * method is used to sort the collection of Nigerian Banks returned by MoneyWave.\r\n         * Banks objects are sorted in ascending order of bank name.\r\n         */\r\n        sortBanksData: function(){\r\n            // return the Promise object\r\n            return new Promise(function(resolve, reject){\r\n                // retrieve the list of banks\r\n                Promise.resolve($.ajax(\r\n                    {\r\n                        url: \"banks.json\",\r\n                        type: \"get\",\r\n                        dataType: \"json\",\r\n                        timeout: 240000 // wait for 4 minutes before timeout of request\r\n\r\n                    }\r\n                )).\r\n                then(function(banksData){ // get the banks object\r\n                    var banksArray = []; // holds the banks array\r\n                    // convert each property and value of the banks object to an object\r\n                    // and store each object in a 'banks array'\r\n                    for(var prop in banksData){\r\n                        // create the bank object\r\n                        let bankOject = {};\r\n                        bankOject[prop] = banksData[prop];\r\n                        // add bank object to banks array\r\n                        banksArray.push(bankOject);\r\n                    }\r\n\r\n                    return banksArray; // return the banks array to the next stage for proper array sorting\r\n                }).\r\n                then(function(banksArrayData){ // get the banks array data\r\n                    // function is used to sort the banks array data in ascending order by name\r\n                    // sort and return the banks array data\r\n                    return banksArrayData.sort(function(item1, item2){\r\n                        var item1Val = \"\"; // holds the value to be compared in item1\r\n                        var item2Val = \"\"; //holds the value to be compared in item2\r\n                        for(let val1 in item1){\r\n                            item1Val = item1[val1]; // assign the value gotten from item1\r\n                        }\r\n                        for(let val2 in item2){\r\n                            item2Val = item2[val2]; // assign the value gotten from item2\r\n                        }\r\n                        // begin comparison test for sorting\r\n                        if(item1Val.toLocaleUpperCase() < item2Val.toLocaleUpperCase()){\r\n                            return -1;\r\n                        }\r\n                        if(item1Val.toLocaleUpperCase() > item2Val.toLocaleUpperCase()){\r\n                            return 1;\r\n                        }\r\n                        return 0;\r\n                    });\r\n                }).\r\n                then(function(sortedBankArrayData){ // receive the sorted bank array\r\n                    resolve(sortedBankArrayData); // resolve the promise with the sorted bank array\r\n                }).\r\n                catch()\r\n            });\r\n        },\r\n\r\n\r\n        /**\r\n         * this object encapsulates the payment gateway credentials\r\n         */\r\n        moneyWaveObject: {\r\n\r\n            /**\r\n             * PRIVATE TOKEN OBJECT. NEVER TO BE ACCESSED DIRECTLY OUTSIDE OF THE PAYMENT GATEWAY OBJECT\r\n             */\r\n            __tokenObject: {tok: \"\", time: 0},\r\n\r\n            /**\r\n             * public property, holds the url for the gateway\r\n             */\r\n            gateway: \"https://live.moneywaveapi.co/\",\r\n\r\n            /**\r\n             * public object holds the keys for the gateway\r\n             */\r\n            key: {\"apiKey\": \"lv_NOR9WTV79WQ7CWKAACCW\",\r\n                \"secret\": \"lv_WVTSFVRP02RMV4AMZXSQA3MCIRA74T\"},\r\n\r\n            /**\r\n             * public property return a Promise object which resolves to the payment\r\n             * gateway token OR rejects with an error message.\r\n             * The property is also responsible for refreshing the payment gateway token when necessary\r\n             *\r\n             * @returns {Promise}\r\n             */\r\n            get useToken(){\r\n\r\n                if(this.__tokenObject.time > Date.now()){ // if present token has NOT expired, return it for use\r\n                    return Promise.resolve(this.__tokenObject.tok);\r\n                }\r\n                else{ // present token has expired, so generate a new one using a Promise object\r\n                    return new Promise(function(resolve, reject){\r\n                        var tokenReq = $.ajax( // request for new token\r\n                            {\r\n                                url: utopiasoftware.saveup.moneyWaveObject.gateway + \"v1/merchant/verify\",\r\n                                type: \"post\",\r\n                                contentType: \"application/json\",\r\n                                dataType: \"json\",\r\n                                timeout: 240000, // wait for 4 minutes before timeout of request\r\n                                processData: false,\r\n                                data: JSON.stringify(utopiasoftware.saveup.moneyWaveObject.key)\r\n                            }\r\n                        );\r\n                        tokenReq.done(function(responseData){ // the server responded to the request\r\n                            if(responseData.status === \"success\"){ // token request was successful\r\n                                // save the token and the time for the next token refresh\r\n                                utopiasoftware.saveup.moneyWaveObject.__tokenObject.tok = responseData.token;\r\n                                utopiasoftware.saveup.moneyWaveObject.__tokenObject.time = (2* 55 *60 * 1000) + Date.now();\r\n                                // resolve the promise with the retrieved token\r\n                                resolve(utopiasoftware.saveup.moneyWaveObject.__tokenObject.tok);\r\n                            }\r\n                            else{ // token request was not successful\r\n                                // reset token and the time for the next token refresh to the default\r\n                                utopiasoftware.saveup.moneyWaveObject.__tokenObject.tok = \"\";\r\n                                utopiasoftware.saveup.moneyWaveObject.__tokenObject.time = 0;\r\n                                // reject promise with an appropriate error message\r\n                                reject(\"app error, cannot complete request\");\r\n                            }\r\n                        });\r\n                        tokenReq.fail(function(){ // the server response was NOT successful\r\n                            // reset token and the time for the next token refresh to the default\r\n                            utopiasoftware.saveup.moneyWaveObject.__tokenObject.tok = \"\";\r\n                            utopiasoftware.saveup.moneyWaveObject.__tokenObject.time = 0;\r\n                            // reject promise with an appropriate error message\r\n                            reject(\"app error, cannot complete request\");\r\n                        });\r\n                    });\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * object encapsulates the paystack payment gateway credentials\r\n         */\r\n        paystackObject: {\r\n\r\n            /**\r\n             * public property, holds the url for the gateway\r\n             */\r\n            gateway: \"https://api.paystack.co/\",\r\n\r\n            /**\r\n             * public object holds the keys for the gateway\r\n             */\r\n            key: {\"secret\": \"sk_test_91815f725eeca4db7d43a08e46bd682d4d669a72\"},\r\n        },\r\n\r\n        /**\r\n         * object encapsulates some operations/manipulations that can be performed on\r\n         * stored financial cards\r\n         */\r\n        financialCardOperations: {\r\n            getCard: function(){\r\n\r\n            }\r\n        }\r\n    }\r\n};\r\n"]}