{"version":3,"sources":["base.js"],"names":[],"mappings":"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","file":"base-compiled.js","sourcesContent":["/**\r\n * Created by UTOPIA SOFTWARE on 19/04/2017.\r\n */\r\n\r\n/**\r\n * file provides the \"base\" framework/utilities required to launch the app. E.g. file creates the base namespace which\r\n * the app is built on.\r\n *\r\n * The author uses the terms 'method' and function interchangeably; likewise the terms 'attribute' and 'property' are\r\n * also used interchangeably\r\n **/\r\n\r\nvar utopiasoftware = {\r\n    saveup : {\r\n\r\n        /**\r\n         * method is used to verify a user's phone number. it returns a Promise object. a resolved promise\r\n         * means the phone number was verified; a rejected promise means phone number verification failed.\r\n         *\r\n         * @param phoneNumber\r\n         * @returns {Promise}\r\n         */\r\n        validatePhoneNumber: function(phoneNumber){\r\n\r\n            phoneNumber = \"\" + phoneNumber; // ensure phone number is seen as a string\r\n\r\n            var smsWatcherTimer = null; // holds the timer used to stop the sms watcher\r\n\r\n            var rejectPromise = null; // holds the reject function of the main Promise object\r\n\r\n            if(phoneNumber.startsWith(\"0\")){ // the phone number starts with 0, replace it with international dialing code\r\n                phoneNumber = phoneNumber.replace(\"0\", \"+234\");\r\n            }\r\n            // show a loader message\r\n            $('#phone-verification-modal .modal-message').html(\"Verifying Phone Number...\");\r\n            $('#phone-verification-modal').get(0).show(); // show loader\r\n\r\n            // create the Promise object which will indicate if a phone was verified or not\r\n            var phoneNumberVerifiedPromise = new Promise(function(resolve, reject){\r\n                rejectPromise = reject;\r\n                var randomNumber = \"\"; //holds the random number to be sent in the sms\r\n\r\n                // start listening to the user's sms inbox\r\n                new Promise(function(resolve2, reject2){\r\n                    SMS.startWatch(resolve2, reject2);\r\n                }).\r\n                then(function(){ // intercept any incoming sms\r\n                    return new Promise(function(res, rej){\r\n                        SMS.enableIntercept(true, res, rej);\r\n                    });\r\n                }).\r\n                then(function(){ // sms watch of the user's inbox has been started\r\n                    // add listener for new arriving sms\r\n                    document.addEventListener('onSMSArrive', function(smsEvent){\r\n                        var sms = smsEvent.data;\r\n                        if(sms.address == phoneNumber && sms.body == \"PostCash \" + randomNumber){\r\n                            clearTimeout(smsWatcherTimer); // stop the set timer\r\n                            SMS.stopWatch(function(){}, function(){}); // stop sms watch\r\n                            SMS.enableIntercept(false, function(){}, function(){}); // stop sms intercept\r\n                            document.removeEventListener('onSMSArrive'); // remove sms arrival listener\r\n                            $('#phone-verification-modal').get(0).hide(); // hide loader\r\n                            resolve(); // resolve promise\r\n                        }\r\n                    });\r\n\r\n                    // return a Promise object whaich sends sms to the phoneNumber parameter\r\n                    return new Promise(function(resolve3, reject3){\r\n\r\n                        var randomGen = new Random(Random.engines.nativeMath); // random number generator\r\n\r\n                        for(var i = 0; i < 6; i++){\r\n                            randomNumber += \"\" + randomGen.integer(0, 9);\r\n                        }\r\n                        SMS.sendSMS(phoneNumber, \"PostCash \" + randomNumber, resolve3, reject3);\r\n                    });\r\n                }).\r\n                then(function(){\r\n                    smsWatcherTimer = setTimeout(function(){\r\n                        SMS.stopWatch(function(){}, function(){});\r\n                        SMS.enableIntercept(false, function(){}, function(){}); // stop sms intercept\r\n                        document.removeEventListener('onSMSArrive');\r\n                        $('#phone-verification-modal').get(0).hide(); // hide loader\r\n                        rejectPromise(\"phone number verification failed\"); // reject the promise i.e. verification failed\r\n                    }, 31000);\r\n                }).\r\n                catch(function(){\r\n                    try{\r\n                        clearTimeout(smsWatcherTimer);\r\n                    }\r\n                    catch(err){}\r\n                    SMS.stopWatch(function(){}, function(){});\r\n                    SMS.enableIntercept(false, function(){}, function(){}); // stop sms intercept\r\n                    document.removeEventListener('onSMSArrive');\r\n                    $('#phone-verification-modal').get(0).hide(); // hide loader\r\n                    reject(\"phone number verification failed\");\r\n                });\r\n            });\r\n\r\n            return phoneNumberVerifiedPromise;\r\n        },\r\n\r\n\r\n        /**\r\n         * method is used to sort the collection of Nigerian Banks returned by MoneyWave.\r\n         * Banks objects are sorted in ascending order of bank name.\r\n         */\r\n        sortBanksData: function(){\r\n            // return the Promise object\r\n            return new Promise(function(resolve, reject){\r\n                // retrieve the list of banks\r\n                Promise.resolve($.ajax(\r\n                    {\r\n                        url: \"banks.json\",\r\n                        type: \"get\",\r\n                        dataType: \"json\",\r\n                        timeout: 240000 // wait for 4 minutes before timeout of request\r\n\r\n                    }\r\n                )).\r\n                then(function(banksData){ // get the banks object\r\n                    var banksArray = []; // holds the banks array\r\n                    // convert each property and value of the banks object to an object\r\n                    // and store each object in a 'banks array'\r\n                    for(var prop in banksData){\r\n                        // create the bank object\r\n                        let bankOject = {};\r\n                        bankOject[prop] = banksData[prop];\r\n                        // add bank object to banks array\r\n                        banksArray.push(bankOject);\r\n                    }\r\n\r\n                    return banksArray; // return the banks array to the next stage for proper array sorting\r\n                }).\r\n                then(function(banksArrayData){ // get the banks array data\r\n                    // function is used to sort the banks array data in ascending order by name\r\n                    // sort and return the banks array data\r\n                    return banksArrayData.sort(function(item1, item2){\r\n                        var item1Val = \"\"; // holds the value to be compared in item1\r\n                        var item2Val = \"\"; //holds the value to be compared in item2\r\n                        for(let val1 in item1){\r\n                            item1Val = item1[val1]; // assign the value gotten from item1\r\n                        }\r\n                        for(let val2 in item2){\r\n                            item2Val = item2[val2]; // assign the value gotten from item2\r\n                        }\r\n                        // begin comparison test for sorting\r\n                        if(item1Val.toLocaleUpperCase() < item2Val.toLocaleUpperCase()){\r\n                            return -1;\r\n                        }\r\n                        if(item1Val.toLocaleUpperCase() > item2Val.toLocaleUpperCase()){\r\n                            return 1;\r\n                        }\r\n                        return 0;\r\n                    });\r\n                }).\r\n                then(function(sortedBankArrayData){ // receive the sorted bank array\r\n                    resolve(sortedBankArrayData); // resolve the promise with the sorted bank array\r\n                }).\r\n                catch()\r\n            });\r\n        },\r\n\r\n\r\n        /**\r\n         * this object encapsulates the payment gateway credentials\r\n         */\r\n        moneyWaveObject: {\r\n\r\n            /**\r\n             * PRIVATE TOKEN OBJECT. NEVER TO BE ACCESSED DIRECTLY OUTSIDE OF THE PAYMENT GATEWAY OBJECT\r\n             */\r\n            __tokenObject: {tok: \"\", time: 0},\r\n\r\n            /**\r\n             * public property, holds the url for the gateway\r\n             */\r\n            gateway: \"https://live.moneywaveapi.co/\",\r\n\r\n            /**\r\n             * public object holds the keys for the gateway\r\n             */\r\n            key: {\"apiKey\": \"lv_NOR9WTV79WQ7CWKAACCW\",\r\n                \"secret\": \"lv_WVTSFVRP02RMV4AMZXSQA3MCIRA74T\"},\r\n\r\n            /**\r\n             * public property return a Promise object which resolves to the payment\r\n             * gateway token OR rejects with an error message.\r\n             * The property is also responsible for refreshing the payment gateway token when necessary\r\n             *\r\n             * @returns {Promise}\r\n             */\r\n            get useToken(){\r\n\r\n                if(this.__tokenObject.time > Date.now()){ // if present token has NOT expired, return it for use\r\n                    return Promise.resolve(this.__tokenObject.tok);\r\n                }\r\n                else{ // present token has expired, so generate a new one using a Promise object\r\n                    return new Promise(function(resolve, reject){\r\n                        var tokenReq = $.ajax( // request for new token\r\n                            {\r\n                                url: utopiasoftware.saveup.moneyWaveObject.gateway + \"v1/merchant/verify\",\r\n                                type: \"post\",\r\n                                contentType: \"application/json\",\r\n                                dataType: \"json\",\r\n                                timeout: 240000, // wait for 4 minutes before timeout of request\r\n                                processData: false,\r\n                                data: JSON.stringify(utopiasoftware.saveup.moneyWaveObject.key)\r\n                            }\r\n                        );\r\n                        tokenReq.done(function(responseData){ // the server responded to the request\r\n                            if(responseData.status === \"success\"){ // token request was successful\r\n                                // save the token and the time for the next token refresh\r\n                                utopiasoftware.saveup.moneyWaveObject.__tokenObject.tok = responseData.token;\r\n                                utopiasoftware.saveup.moneyWaveObject.__tokenObject.time = (2* 55 *60 * 1000) + Date.now();\r\n                                // resolve the promise with the retrieved token\r\n                                resolve(utopiasoftware.saveup.moneyWaveObject.__tokenObject.tok);\r\n                            }\r\n                            else{ // token request was not successful\r\n                                // reset token and the time for the next token refresh to the default\r\n                                utopiasoftware.saveup.moneyWaveObject.__tokenObject.tok = \"\";\r\n                                utopiasoftware.saveup.moneyWaveObject.__tokenObject.time = 0;\r\n                                // reject promise with an appropriate error message\r\n                                reject(\"app error, cannot complete request\");\r\n                            }\r\n                        });\r\n                        tokenReq.fail(function(){ // the server response was NOT successful\r\n                            // reset token and the time for the next token refresh to the default\r\n                            utopiasoftware.saveup.moneyWaveObject.__tokenObject.tok = \"\";\r\n                            utopiasoftware.saveup.moneyWaveObject.__tokenObject.time = 0;\r\n                            // reject promise with an appropriate error message\r\n                            reject(\"app error, cannot complete request\");\r\n                        });\r\n                    });\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * object encapsulates the paystack payment gateway credentials\r\n         */\r\n        paystackObject: {\r\n\r\n            /**\r\n             * public property, holds the url for the gateway\r\n             */\r\n            gateway: \"https://api.paystack.co/\",\r\n\r\n            /**\r\n             * public object holds the keys for the gateway\r\n             */\r\n            key: {\"secret\": \"sk_test_91815f725eeca4db7d43a08e46bd682d4d669a72\"}\r\n        },\r\n\r\n        /**\r\n         * object encapsulates some operations/manipulations that can be performed on\r\n         * stored financial cards\r\n         */\r\n        financialCardOperations: {\r\n\r\n            /**\r\n             * method is used to load the collection of user's financial cards (\"My Cards\") data from\r\n             * the device secure storage\r\n             * @return {Promise} method returns a Promise object that resolves with\r\n             * the retrieved cards as an array OR rejects when the cards cannot be retrieved.\r\n             *\r\n             * NOTE: the Promise object resolve with an empty array when no cards are available\r\n             */\r\n            loadCardData: function(){\r\n                // return the Promise object\r\n                return new Promise(function(resolve, reject){\r\n                    // read the user's cards data from secure storage\r\n                    Promise.resolve(intel.security.secureStorage.read({'id':'postcash-user-cards'})).\r\n                    then(function(instanceId){\r\n                        // read the content of the securely stored cards data\r\n                        return Promise.resolve(intel.security.secureData.getData(instanceId));\r\n                    }, function(errObject){\r\n                        if(errObject.code == 1){ // the secure card storage has not been created before\r\n                            resolve([]); // return an empty cards data array\r\n                        }\r\n                        else{ // another error occurred (which is considered severe)\r\n                            throw errObject;\r\n                        }\r\n                    }).\r\n                    then(function(secureCardDataArray){\r\n                        secureCardDataArray = JSON.parse(secureCardDataArray); // convert the string data to an object\r\n                        resolve(secureCardDataArray);\r\n                    }).\r\n                    catch(function(err){\r\n                        // reject the Promise\r\n                        reject(err);\r\n                    });\r\n                });\r\n            },\r\n\r\n            /**\r\n             * method is used to retrieve data details of a financial card\r\n             * @param cardId {String} the unique of the financial card to be retrieved\r\n\r\n             * @returns {Promise} returns a promise that resolves to the\r\n             * data details of the financial card or rejects with an error\r\n             */\r\n            getCard: function(cardId){\r\n\r\n                // return a Promise object for the method\r\n                return new Promise(function(resolve, reject){\r\n                    // get all the stored cards on the user's device\r\n                    Promise.resolve(intel.security.secureStorage.read({'id':'postcash-user-cards'})).\r\n                    then(function(instanceId){\r\n                        return Promise.resolve(intel.security.secureData.getData(instanceId));\r\n                    }).\r\n                    then(function(secureCardDataArray){\r\n                        secureCardDataArray = JSON.parse(secureCardDataArray); // convert the string data to an array object\r\n                        return secureCardDataArray.find(function(arrayElem){ // find the right financial card based on the card id\r\n                            if(arrayElem.cardUniqueId === cardId){ // this is the financial card that is required\r\n                                return true\r\n                            }\r\n                        });\r\n                    }).\r\n                    then(function(cardObject){ // get the financial card object\r\n                        if(!cardObject){ // no financial card was discovered\r\n                            throw \"error\"; // throw an error\r\n                        }\r\n                        else { // a financial card was found\r\n                            resolve(cardObject); // resolve the promise with the card object\r\n                        }\r\n                    }).catch(function(err){ // an error occurred OR no card was found\r\n                        reject(err); // reject the promise with an error\r\n                    });\r\n                });\r\n            },\r\n\r\n\r\n            /**\r\n             * method is used to retrieve data details of a financial card BASED ON THE CARD NUMBER\r\n             * @param cardNumber {String} the card number of the financial card to be retrieved\r\n\r\n             * @returns {Promise} returns a promise that resolves to the\r\n             * data details of the financial card, null if no data or rejects with an error\r\n             */\r\n            getCardByNumber: function(cardNumber){\r\n\r\n                // return a Promise object for the method\r\n                return new Promise(function(resolve, reject){\r\n                    // get all the stored cards on the user's device\r\n                    Promise.resolve(intel.security.secureStorage.read({'id':'postcash-user-cards'})).\r\n                    then(function(instanceId){\r\n                        return Promise.resolve(intel.security.secureData.getData(instanceId));\r\n                    }).\r\n                    then(function(secureCardDataArray){\r\n                        secureCardDataArray = JSON.parse(secureCardDataArray); // convert the string data to an array object\r\n                        return secureCardDataArray.find(function(arrayElem){ // find the right financial card based on the card number\r\n                            if(arrayElem.cardNumber === cardNumber){ // this is the financial card that is required\r\n                                return true\r\n                            }\r\n                        });\r\n                    }).\r\n                    then(function(cardObject){ // get the financial card object\r\n                        if(!cardObject){ // no financial card was discovered\r\n                            resolve(null); // resolve the promise with null\r\n                        }\r\n                        else { // a financial card was found\r\n                            resolve(cardObject); // resolve the promise with the card object\r\n                        }\r\n                    }).catch(function(err){ // an error occurred OR no card was found\r\n                        reject(err); // reject the promise with an error\r\n                    });\r\n                });\r\n            },\r\n\r\n\r\n            /**\r\n             * method is used to delete data details of a financial card\r\n             * @param cardId {String} the unique of the financial card to be deleted\r\n\r\n             * @returns {Promise} returns a promise that resolves when the financial card deleted or rejects with an error\r\n             */\r\n            deleteCard: function(cardId){\r\n\r\n                // return a Promise object for the method\r\n                return new Promise(function(resolve, reject){\r\n                    // get all the stored cards on the user's device\r\n                    Promise.resolve(intel.security.secureStorage.read({'id':'postcash-user-cards'})).\r\n                    then(function(instanceId){\r\n                        return Promise.resolve(intel.security.secureData.getData(instanceId));\r\n                    }).\r\n                    then(function(secureCardDataArray){\r\n                        secureCardDataArray = JSON.parse(secureCardDataArray); // convert the string data to an array object\r\n                        var cardObjIndex = secureCardDataArray.findIndex(function(arrayElem){ // find the right financial card index based on the card id\r\n                            if(arrayElem.cardUniqueId === cardId){ // this is the financial card that is required\r\n                                return true\r\n                            }\r\n                        });\r\n\r\n                        if(cardObjIndex < 0){ // no financial card with the provided id was discovered\r\n                            throw \"error\"; // throw an error\r\n                        }\r\n                        else{ // a financial card was found with the specified id\r\n                            secureCardDataArray.splice(cardObjIndex, 1); // delete the item\r\n                            // write the updated financial cards collection array back into secure storage\r\n                            return intel.security.secureData.createFromData({'data': JSON.stringify(secureCardDataArray)});\r\n                        }\r\n                    }).\r\n                    then(function(instanceId){\r\n                        return intel.security.secureStorage.write({'id':'postcash-user-cards', 'instanceID': instanceId });\r\n                    }).\r\n                    then(function(){ // financial cards array collection has been updated, so resolve the promise to delete the card data\r\n\r\n                        resolve(); // resolve the Promise to delete the card data\r\n                    }).\r\n                    catch(function(err){ // an error occurred OR no card was found\r\n                        reject(err); // reject the promise with an error\r\n                    });\r\n                });\r\n            },\r\n\r\n\r\n            /**\r\n             * method is used to add financial card data details to the collection of financial cards\r\n             *\r\n             * @param cardObject {Object} the financial card object to be added to the\r\n             * collection of financial cards\r\n\r\n             * @returns {Promise} returns a promise that resolves when the financial card has\r\n             * been added/created or rejects with an error\r\n             */\r\n            addCard: function(cardObject){\r\n\r\n                // return a Promise which resolves when financial card has been added successfully or rejects otherwise\r\n                return new Promise(function(resolve, reject){\r\n                    // get the previous stored cards on the user's device\r\n                    Promise.resolve(intel.security.secureStorage.read({'id':'postcash-user-cards'})).\r\n                    then(function(instanceId){\r\n                        return Promise.resolve(intel.security.secureData.getData(instanceId));\r\n                    }, function(errObject){\r\n                        if(errObject.code == 1){ // the secure card storage has not been created before\r\n                            return '[]'; // return an empty card data array\r\n                        }\r\n                        else{ // another error occurred (which is considered severe)\r\n                            throw errObject;\r\n                        }\r\n                    }).\r\n                    then(function(secureCardDataArray){\r\n                        secureCardDataArray = JSON.parse(secureCardDataArray); // convert the string data to an object\r\n                        secureCardDataArray.unshift(cardObject); // add the card to the beginning of the array collection\r\n                        // store the updated card collection securely on user's device\r\n                        return intel.security.secureData.createFromData({'data': JSON.stringify(secureCardDataArray)});\r\n                    }).\r\n                    then(function(instanceId){\r\n                        return intel.security.secureStorage.write({'id':'postcash-user-cards', 'instanceID': instanceId });\r\n                    }).\r\n                    then(function(){ // card has been added\r\n                        // resolve promise\r\n                        resolve();\r\n                    }).\r\n                    catch(function(err){ // there was an error and card could NOT be added\r\n                        reject(err); // reject promise\r\n                    });\r\n                });\r\n            }\r\n\r\n        },\r\n\r\n\r\n        /**\r\n         * object encapsulates some operations/manipulations  that can be performed on\r\n         * stored bank accounts\r\n         */\r\n        bankAccountOperations: {\r\n\r\n            /**\r\n             * method is used to load the collection of user's stored bank accounts (\"My accounts\") data from\r\n             * the device secure storage\r\n             *\r\n             * @return {Promise} method returns a Promise object that resolves with\r\n             * the retrieved bank accounts as an array OR rejects when the bank accounts cannot be retrieved.\r\n             *\r\n             * NOTE: the Promise object resolve with an empty array when no accounts are available\r\n             */\r\n            loadMyAccountsData: function(){\r\n                // return the Promise object\r\n                return new Promise(function(resolve, reject){\r\n                    // read the user's bank accounts (\"My Accounts\") data from secure storage\r\n                    Promise.resolve(intel.security.secureStorage.read({'id':'postcash-user-bank-accounts'})).\r\n                    then(function(instanceId){\r\n                        // read the content of the securely stored bank accounts data\r\n                        return Promise.resolve(intel.security.secureData.getData(instanceId));\r\n                    }, function(errObject){\r\n                        if(errObject.code == 1){ // the secure bank accounts storage has not been created before\r\n                            resolve([]); // return an empty my accounts data array\r\n                        }\r\n                        else{ // another error occurred (which is considered severe)\r\n                            throw errObject;\r\n                        }\r\n                    }).\r\n                    then(function(secureBankAcctDataArray){\r\n                        secureBankAcctDataArray = JSON.parse(secureBankAcctDataArray); // convert the string data to an object\r\n                        resolve(secureBankAcctDataArray);\r\n                    }).\r\n                    catch(function(err){\r\n                        // reject the Promise\r\n                        reject(err);\r\n                    });\r\n                });\r\n            },\r\n\r\n            /**\r\n             * method is used to retrieve data details of a specific user's bank account\r\n             * @param bankAcctId {String} the unique id of the specific bank account to be retrieved\r\n\r\n             * @returns {Promise} returns a promise that resolves to the\r\n             * data details of the specific user bank account or rejects with an error\r\n             */\r\n            getMyAccount: function(bankAcctId){\r\n\r\n                // return a Promise object for the method\r\n                return new Promise(function(resolve, reject){\r\n                    // get all the stored cards on the user's device\r\n                    Promise.resolve(intel.security.secureStorage.read({'id':'postcash-user-bank-accounts'})).\r\n                    then(function(instanceId){\r\n                        return Promise.resolve(intel.security.secureData.getData(instanceId));\r\n                    }).\r\n                    then(function(secureBankAcctDataArray){\r\n                        secureBankAcctDataArray = JSON.parse(secureBankAcctDataArray); // convert the string data to an array object\r\n                        return secureBankAcctDataArray.find(function(arrayElem){ // find the right bank acct based on the acct id\r\n                            if(arrayElem.uniqueAccountId === bankAcctId){ // this is the bank acct that is required\r\n                                return true\r\n                            }\r\n                        });\r\n                    }).\r\n                    then(function(bankAcctObject){ // get the bank account object\r\n                        if(!bankAcctObject){ // no bank account was discovered\r\n                            throw \"error\"; // throw an error\r\n                        }\r\n                        else { // a bank account was found\r\n                            resolve(bankAcctObject); // resolve the promise with the account object\r\n                        }\r\n                    }).catch(function(err){ // an error occurred OR no account was found\r\n                        reject(err); // reject the promise with an error\r\n                    });\r\n                });\r\n            },\r\n\r\n            /**\r\n             * method is used to delete data details of a user's bank account\r\n             * @param bankAcctId {String} the unique id of the specific bank account to be deleted\r\n\r\n             * @returns {Promise} returns a promise that resolves when the bank account is deleted or rejects with an error\r\n             */\r\n            deleteMyAccount: function(bankAcctId){\r\n\r\n                // return a Promise object for the method\r\n                return new Promise(function(resolve, reject){\r\n                    // get all the stored accounts on the user's device\r\n                    Promise.resolve(intel.security.secureStorage.read({'id':'postcash-user-bank-accounts'})).\r\n                    then(function(instanceId){\r\n                        return Promise.resolve(intel.security.secureData.getData(instanceId));\r\n                    }).\r\n                    then(function(secureBankAcctDataArray){\r\n                        secureBankAcctDataArray = JSON.parse(secureBankAcctDataArray); // convert the string data to an array object\r\n                        var acctObjIndex = secureBankAcctDataArray.findIndex(function(arrayElem){ // find the right bank acct index based on the acct id\r\n                            if(arrayElem.uniqueAccountId === bankAcctId){ // this is the bank account that is required\r\n                                return true\r\n                            }\r\n                        });\r\n\r\n                        if(acctObjIndex < 0){ // no bank acct with the provided id was discovered\r\n                            throw \"error\"; // throw an error\r\n                        }\r\n                        else{ // a bank account was found with the specified id\r\n                            secureBankAcctDataArray.splice(acctObjIndex, 1); // delete the item\r\n                            // write the updated bank accounts collection array back into secure storage\r\n                            return intel.security.secureData.createFromData({'data': JSON.stringify(secureBankAcctDataArray)});\r\n                        }\r\n                    }).\r\n                    then(function(instanceId){\r\n                        return intel.security.secureStorage.write({'id':'postcash-user-bank-accounts', 'instanceID': instanceId });\r\n                    }).\r\n                    then(function(){ // bank accounts array collection has been updated, so resolve the promise to delete the acct data\r\n\r\n                        resolve(); // resolve the Promise to delete the bank account data\r\n                    }).\r\n                    catch(function(err){ // an error occurred OR no bank account was found\r\n                        reject(err); // reject the promise with an error\r\n                    });\r\n                });\r\n            },\r\n\r\n            /**\r\n             * method is used to add bank account data details to the collection of user's bank account\r\n             *\r\n             * @param bankAcctObject {Object} the bank account object to be added to the\r\n             * collection of user's bank accounts\r\n\r\n             * @returns {Promise} returns a promise that resolves when the bank account has\r\n             * been added/created or rejects with an error\r\n             */\r\n            addMyAccount: function(bankAcctObject){\r\n\r\n                // return a Promise which resolves when bank account has been added successfully or rejects otherwise\r\n                return new Promise(function(resolve, reject){\r\n                    // get the previous bank accounts on the user's device\r\n                    Promise.resolve(intel.security.secureStorage.read({'id':'postcash-user-bank-accounts'})).\r\n                    then(function(instanceId){\r\n                        return Promise.resolve(intel.security.secureData.getData(instanceId));\r\n                    }, function(errObject){\r\n                        if(errObject.code == 1){ // the secure storage has not been created before\r\n                            return '[]'; // return an empty data array\r\n                        }\r\n                        else{ // another error occurred (which is considered severe)\r\n                            throw errObject;\r\n                        }\r\n                    }).\r\n                    then(function(secureBankAcctDataArray){\r\n                        secureBankAcctDataArray = JSON.parse(secureBankAcctDataArray); // convert the string data to an object\r\n                        secureBankAcctDataArray.unshift(bankAcctObject); // add the bank acct to the beginning of the array collection\r\n                        // store the updated account collection securely on user's device\r\n                        return intel.security.secureData.createFromData({'data': JSON.stringify(secureBankAcctDataArray)});\r\n                    }).\r\n                    then(function(instanceId){\r\n                        return intel.security.secureStorage.write({'id':'postcash-user-bank-accounts', 'instanceID': instanceId });\r\n                    }).\r\n                    then(function(){ // account has been added\r\n                        // resolve promise\r\n                        resolve();\r\n                    }).\r\n                    catch(function(err){ // there was an error and account could NOT be added\r\n                        reject(err); // reject promise\r\n                    });\r\n                });\r\n            }\r\n        },\r\n\r\n\r\n        /**\r\n         * object encapsulates some operations/manipulations  that can be performed on\r\n         * stored saved recipients bank accounts\r\n         */\r\n        savedRecipientsBankAccountOperations: {\r\n\r\n            /**\r\n             * method is used to load the collection of saved recipients stored bank accounts (\"Stored Recipients\") data from\r\n             * the device secure storage\r\n             *\r\n             * @return {Promise} method returns a Promise object that resolves with\r\n             * the retrieved saved recipients bank accounts as an array OR\r\n             * rejects when the saved recipients bank accounts cannot be retrieved.\r\n             *\r\n             * NOTE: the Promise object resolve with an empty array when no accounts are available\r\n             */\r\n            loadSavedRecipientsAccountsData: function(){\r\n                // return the Promise object\r\n                return new Promise(function(resolve, reject){\r\n                    // read the saved recipients bank accounts (\"Saved Recipients\") data from secure storage\r\n                    Promise.resolve(intel.security.secureStorage.read({'id':'postcash-saved-recipients-bank-accounts'})).\r\n                    then(function(instanceId){\r\n                        // read the content of the securely stored bank accounts data\r\n                        return Promise.resolve(intel.security.secureData.getData(instanceId));\r\n                    }, function(errObject){\r\n                        if(errObject.code == 1){ // the secure bank accounts storage has not been created before\r\n                            resolve([]); // return an empty my accounts data array\r\n                        }\r\n                        else{ // another error occurred (which is considered severe)\r\n                            throw errObject;\r\n                        }\r\n                    }).\r\n                    then(function(secureBankAcctDataArray){\r\n                        secureBankAcctDataArray = JSON.parse(secureBankAcctDataArray); // convert the string data to an object\r\n                        resolve(secureBankAcctDataArray);\r\n                    }).\r\n                    catch(function(err){\r\n                        // reject the Promise\r\n                        reject(err);\r\n                    });\r\n                });\r\n            },\r\n\r\n            /**\r\n             * method is used to retrieve data details of a specific recipient's bank account\r\n             * @param bankAcctId {String} the unique id of the specific bank account to be retrieved\r\n\r\n             * @returns {Promise} returns a promise that resolves to the\r\n             * data details of the specific user bank account or rejects with an error\r\n             */\r\n            getSavedRecipientAccount: function(bankAcctId){\r\n\r\n                // return a Promise object for the method\r\n                return new Promise(function(resolve, reject){\r\n                    // get all the stored recipient accounts on the user's device\r\n                    Promise.resolve(intel.security.secureStorage.read({'id':'postcash-saved-recipients-bank-accounts'})).\r\n                    then(function(instanceId){\r\n                        return Promise.resolve(intel.security.secureData.getData(instanceId));\r\n                    }).\r\n                    then(function(secureBankAcctDataArray){\r\n                        secureBankAcctDataArray = JSON.parse(secureBankAcctDataArray); // convert the string data to an array object\r\n                        return secureBankAcctDataArray.find(function(arrayElem){ // find the right bank acct based on the acct id\r\n                            if(arrayElem.uniqueAccountId === bankAcctId){ // this is the bank acct that is required\r\n                                return true\r\n                            }\r\n                        });\r\n                    }).\r\n                    then(function(bankAcctObject){ // get the bank account object\r\n                        if(!bankAcctObject){ // no bank account was discovered\r\n                            throw \"error\"; // throw an error\r\n                        }\r\n                        else { // a bank account was found\r\n                            resolve(bankAcctObject); // resolve the promise with the account object\r\n                        }\r\n                    }).catch(function(err){ // an error occurred OR no account was found\r\n                        reject(err); // reject the promise with an error\r\n                    });\r\n                });\r\n            },\r\n\r\n\r\n            /**\r\n             * method is used to retrieve data details of a specific recipient's bank account BASED ON THE ACCOUNT NUMBER\r\n             * @param bankAcctNumber {String} the bank account number of the saved recipient to be retrieved\r\n\r\n             * @returns {Promise} returns a promise that resolves to the\r\n             * data details of the specific user bank account, null if no data or rejects with an error\r\n             */\r\n            getSavedRecipientAccountByNumber: function(bankAcctNumber){\r\n\r\n                // return a Promise object for the method\r\n                return new Promise(function(resolve, reject){\r\n                    // get all the saved recipient account on the user's device\r\n                    Promise.resolve(intel.security.secureStorage.read({'id':'postcash-saved-recipients-bank-accounts'})).\r\n                    then(function(instanceId){\r\n                        return Promise.resolve(intel.security.secureData.getData(instanceId));\r\n                    }).\r\n                    then(function(secureBankAcctDataArray){\r\n                        secureBankAcctDataArray = JSON.parse(secureBankAcctDataArray); // convert the string data to an array object\r\n                        return secureBankAcctDataArray.find(function(arrayElem){ // find the right recipient account based on the account number\r\n                            if(arrayElem.bankAccountNumber === bankAcctNumber){ // this is the bank acct that is required\r\n                                return true\r\n                            }\r\n                        });\r\n                    }).\r\n                    then(function(bankAcctObject){ // get the bank account object\r\n                        if(!bankAcctObject){ // no bank account was discovered\r\n                            resolve(null); // resolve the promise with null\r\n                        }\r\n                        else { // a bank account was found\r\n                            resolve(bankAcctObject); // resolve the promise with the bank account object\r\n                        }\r\n                    }).catch(function(err){ // an error occurred OR no bank account was found\r\n                        reject(err); // reject the promise with an error\r\n                    });\r\n                });\r\n            },\r\n\r\n            /**\r\n             * method is used to delete data details of a recipient's bank account\r\n             * @param bankAcctId {String} the unique id of the specific bank account to be deleted\r\n\r\n             * @returns {Promise} returns a promise that resolves when the bank account is deleted or rejects with an error\r\n             */\r\n            deleteSavedRecipientAccount: function(bankAcctId){\r\n\r\n                // return a Promise object for the method\r\n                return new Promise(function(resolve, reject){\r\n                    // get all the stored accounts on the user's device\r\n                    Promise.resolve(intel.security.secureStorage.read({'id':'postcash-saved-recipients-bank-accounts'})).\r\n                    then(function(instanceId){\r\n                        return Promise.resolve(intel.security.secureData.getData(instanceId));\r\n                    }).\r\n                    then(function(secureBankAcctDataArray){\r\n                        secureBankAcctDataArray = JSON.parse(secureBankAcctDataArray); // convert the string data to an array object\r\n                        var acctObjIndex = secureBankAcctDataArray.findIndex(function(arrayElem){ // find the right bank acct index based on the acct id\r\n                            if(arrayElem.uniqueAccountId === bankAcctId){ // this is the bank account that is required\r\n                                return true\r\n                            }\r\n                        });\r\n\r\n                        if(acctObjIndex < 0){ // no bank acct with the provided id was discovered\r\n                            throw \"error\"; // throw an error\r\n                        }\r\n                        else{ // a bank account was found with the specified id\r\n                            secureBankAcctDataArray.splice(acctObjIndex, 1); // delete the item\r\n                            // write the updated bank accounts collection array back into secure storage\r\n                            return intel.security.secureData.createFromData({'data': JSON.stringify(secureBankAcctDataArray)});\r\n                        }\r\n                    }).\r\n                    then(function(instanceId){\r\n                        return intel.security.secureStorage.write({'id':'postcash-saved-recipients-bank-accounts',\r\n                            'instanceID': instanceId });\r\n                    }).\r\n                    then(function(){ // bank accounts array collection has been updated, so resolve the promise to delete the acct data\r\n\r\n                        resolve(); // resolve the Promise to delete the bank account data\r\n                    }).\r\n                    catch(function(err){ // an error occurred OR no bank account was found\r\n                        reject(err); // reject the promise with an error\r\n                    });\r\n                });\r\n            },\r\n\r\n            /**\r\n             * method is used to add bank account data details to the collection of recipient's bank account\r\n             *\r\n             * @param bankAcctObject {Object} the bank account object to be added to the\r\n             * collection of saved recipients bank accounts\r\n\r\n             * @returns {Promise} returns a promise that resolves when the bank account has\r\n             * been added/created or rejects with an error\r\n             */\r\n            addSavedRecipientAccount: function(bankAcctObject){\r\n\r\n                // return a Promise which resolves when bank account has been added successfully or rejects otherwise\r\n                return new Promise(function(resolve, reject){\r\n                    // get the previous recipient's bank accounts on the user's device\r\n                    Promise.resolve(intel.security.secureStorage.read({'id':'postcash-saved-recipients-bank-accounts'})).\r\n                    then(function(instanceId){\r\n                        return Promise.resolve(intel.security.secureData.getData(instanceId));\r\n                    }, function(errObject){\r\n                        if(errObject.code == 1){ // the secure storage has not been created before\r\n                            return '[]'; // return an empty data array\r\n                        }\r\n                        else{ // another error occurred (which is considered severe)\r\n                            throw errObject;\r\n                        }\r\n                    }).\r\n                    then(function(secureBankAcctDataArray){\r\n                        secureBankAcctDataArray = JSON.parse(secureBankAcctDataArray); // convert the string data to an object\r\n                        secureBankAcctDataArray.unshift(bankAcctObject); // add the bank acct to the beginning of the array collection\r\n                        // store the updated account collection securely on user's device\r\n                        return intel.security.secureData.createFromData({'data': JSON.stringify(secureBankAcctDataArray)});\r\n                    }).\r\n                    then(function(instanceId){\r\n                        return intel.security.secureStorage.write({'id':'postcash-saved-recipients-bank-accounts',\r\n                            'instanceID': instanceId });\r\n                    }).\r\n                    then(function(){ // account has been added\r\n                        // resolve promise\r\n                        resolve();\r\n                    }).\r\n                    catch(function(err){ // there was an error and account could NOT be added\r\n                        reject(err); // reject promise\r\n                    });\r\n                });\r\n            }\r\n        },\r\n\r\n\r\n        /**\r\n         * object encapsulates some operations/manipulations  that can be performed on\r\n         * stored transactions history on the users devices\r\n         */\r\n        transactionHistoryOperations: {\r\n\r\n            /**\r\n             * method is used to load the collection of saved recipients stored bank accounts (\"Stored Recipients\") data from\r\n             * the device secure storage\r\n             *\r\n             * @return {Promise} method returns a Promise object that resolves with\r\n             * the retrieved saved recipients bank accounts as an array OR\r\n             * rejects when the saved recipients bank accounts cannot be retrieved.\r\n             *\r\n             * NOTE: the Promise object resolve with an empty array when no accounts are available\r\n             */\r\n            loadSavedRecipientsAccountsData: function(){\r\n                // return the Promise object\r\n                return new Promise(function(resolve, reject){\r\n                    // read the saved recipients bank accounts (\"Saved Recipients\") data from secure storage\r\n                    Promise.resolve(intel.security.secureStorage.read({'id':'postcash-saved-recipients-bank-accounts'})).\r\n                    then(function(instanceId){\r\n                        // read the content of the securely stored bank accounts data\r\n                        return Promise.resolve(intel.security.secureData.getData(instanceId));\r\n                    }, function(errObject){\r\n                        if(errObject.code == 1){ // the secure bank accounts storage has not been created before\r\n                            resolve([]); // return an empty my accounts data array\r\n                        }\r\n                        else{ // another error occurred (which is considered severe)\r\n                            throw errObject;\r\n                        }\r\n                    }).\r\n                    then(function(secureBankAcctDataArray){\r\n                        secureBankAcctDataArray = JSON.parse(secureBankAcctDataArray); // convert the string data to an object\r\n                        resolve(secureBankAcctDataArray);\r\n                    }).\r\n                    catch(function(err){\r\n                        // reject the Promise\r\n                        reject(err);\r\n                    });\r\n                });\r\n            },\r\n\r\n            /**\r\n             * method is used to retrieve data details of a specific recipient's bank account\r\n             * @param bankAcctId {String} the unique id of the specific bank account to be retrieved\r\n\r\n             * @returns {Promise} returns a promise that resolves to the\r\n             * data details of the specific user bank account or rejects with an error\r\n             */\r\n            getSavedRecipientAccount: function(bankAcctId){\r\n\r\n                // return a Promise object for the method\r\n                return new Promise(function(resolve, reject){\r\n                    // get all the stored recipient accounts on the user's device\r\n                    Promise.resolve(intel.security.secureStorage.read({'id':'postcash-saved-recipients-bank-accounts'})).\r\n                    then(function(instanceId){\r\n                        return Promise.resolve(intel.security.secureData.getData(instanceId));\r\n                    }).\r\n                    then(function(secureBankAcctDataArray){\r\n                        secureBankAcctDataArray = JSON.parse(secureBankAcctDataArray); // convert the string data to an array object\r\n                        return secureBankAcctDataArray.find(function(arrayElem){ // find the right bank acct based on the acct id\r\n                            if(arrayElem.uniqueAccountId === bankAcctId){ // this is the bank acct that is required\r\n                                return true\r\n                            }\r\n                        });\r\n                    }).\r\n                    then(function(bankAcctObject){ // get the bank account object\r\n                        if(!bankAcctObject){ // no bank account was discovered\r\n                            throw \"error\"; // throw an error\r\n                        }\r\n                        else { // a bank account was found\r\n                            resolve(bankAcctObject); // resolve the promise with the account object\r\n                        }\r\n                    }).catch(function(err){ // an error occurred OR no account was found\r\n                        reject(err); // reject the promise with an error\r\n                    });\r\n                });\r\n            },\r\n\r\n\r\n            /**\r\n             * method is used to retrieve data details of a specific recipient's bank account BASED ON THE ACCOUNT NUMBER\r\n             * @param bankAcctNumber {String} the bank account number of the saved recipient to be retrieved\r\n\r\n             * @returns {Promise} returns a promise that resolves to the\r\n             * data details of the specific user bank account, null if no data or rejects with an error\r\n             */\r\n            getSavedRecipientAccountByNumber: function(bankAcctNumber){\r\n\r\n                // return a Promise object for the method\r\n                return new Promise(function(resolve, reject){\r\n                    // get all the saved recipient account on the user's device\r\n                    Promise.resolve(intel.security.secureStorage.read({'id':'postcash-saved-recipients-bank-accounts'})).\r\n                    then(function(instanceId){\r\n                        return Promise.resolve(intel.security.secureData.getData(instanceId));\r\n                    }).\r\n                    then(function(secureBankAcctDataArray){\r\n                        secureBankAcctDataArray = JSON.parse(secureBankAcctDataArray); // convert the string data to an array object\r\n                        return secureBankAcctDataArray.find(function(arrayElem){ // find the right recipient account based on the account number\r\n                            if(arrayElem.bankAccountNumber === bankAcctNumber){ // this is the bank acct that is required\r\n                                return true\r\n                            }\r\n                        });\r\n                    }).\r\n                    then(function(bankAcctObject){ // get the bank account object\r\n                        if(!bankAcctObject){ // no bank account was discovered\r\n                            resolve(null); // resolve the promise with null\r\n                        }\r\n                        else { // a bank account was found\r\n                            resolve(bankAcctObject); // resolve the promise with the bank account object\r\n                        }\r\n                    }).catch(function(err){ // an error occurred OR no bank account was found\r\n                        reject(err); // reject the promise with an error\r\n                    });\r\n                });\r\n            },\r\n\r\n            /**\r\n             * method is used to delete data details of a recipient's bank account\r\n             * @param bankAcctId {String} the unique id of the specific bank account to be deleted\r\n\r\n             * @returns {Promise} returns a promise that resolves when the bank account is deleted or rejects with an error\r\n             */\r\n            deleteSavedRecipientAccount: function(bankAcctId){\r\n\r\n                // return a Promise object for the method\r\n                return new Promise(function(resolve, reject){\r\n                    // get all the stored accounts on the user's device\r\n                    Promise.resolve(intel.security.secureStorage.read({'id':'postcash-saved-recipients-bank-accounts'})).\r\n                    then(function(instanceId){\r\n                        return Promise.resolve(intel.security.secureData.getData(instanceId));\r\n                    }).\r\n                    then(function(secureBankAcctDataArray){\r\n                        secureBankAcctDataArray = JSON.parse(secureBankAcctDataArray); // convert the string data to an array object\r\n                        var acctObjIndex = secureBankAcctDataArray.findIndex(function(arrayElem){ // find the right bank acct index based on the acct id\r\n                            if(arrayElem.uniqueAccountId === bankAcctId){ // this is the bank account that is required\r\n                                return true\r\n                            }\r\n                        });\r\n\r\n                        if(acctObjIndex < 0){ // no bank acct with the provided id was discovered\r\n                            throw \"error\"; // throw an error\r\n                        }\r\n                        else{ // a bank account was found with the specified id\r\n                            secureBankAcctDataArray.splice(acctObjIndex, 1); // delete the item\r\n                            // write the updated bank accounts collection array back into secure storage\r\n                            return intel.security.secureData.createFromData({'data': JSON.stringify(secureBankAcctDataArray)});\r\n                        }\r\n                    }).\r\n                    then(function(instanceId){\r\n                        return intel.security.secureStorage.write({'id':'postcash-saved-recipients-bank-accounts',\r\n                            'instanceID': instanceId });\r\n                    }).\r\n                    then(function(){ // bank accounts array collection has been updated, so resolve the promise to delete the acct data\r\n\r\n                        resolve(); // resolve the Promise to delete the bank account data\r\n                    }).\r\n                    catch(function(err){ // an error occurred OR no bank account was found\r\n                        reject(err); // reject the promise with an error\r\n                    });\r\n                });\r\n            },\r\n\r\n            /**\r\n             * method is used to add financial transaction history data details to the collection\r\n             * of transaction history on the device.\r\n             * Transaction history collection stores a limit of 20 transactions data.\r\n             * If the limit is attained, the least recent transaction is removed from\r\n             * the collection first before the latest transaction is added\r\n             *\r\n             * @param transactionDataObject {Object} the bank account object to be added to the\r\n             * collection of saved recipients bank accounts\r\n\r\n             * @returns {Promise} returns a promise that resolves when the transaction history data\r\n             * has been added/created or rejects with an error\r\n             */\r\n            addTransactionHistory: function(transactionDataObject){\r\n\r\n                // return a Promise which resolves when transaction history data has been added successfully or rejects otherwise\r\n                return new Promise(function(resolve, reject){\r\n                    // get the transaction history data collection on the user's device\r\n                    Promise.resolve(intel.security.secureStorage.read({'id':'postcash-transaction-history-collection'})).\r\n                    then(function(instanceId){\r\n                        return Promise.resolve(intel.security.secureData.getData(instanceId));\r\n                    }, function(errObject){\r\n                        if(errObject.code == 1){ // the secure storage has not been created before\r\n                            return '[]'; // return the empty array as string\r\n                        }\r\n                        else{ // another error occurred (which is considered severe)\r\n                            throw errObject;\r\n                        }\r\n                    }).\r\n                    then(function(transactionDataArray){\r\n                        transactionDataArray = JSON.parse(transactionDataArray); // convert the string data to an object\r\n                        // check if the transaction array has reached the limit of 20 items\r\n                        if(transactionDataArray.length == 20){ // array has reached its limit\r\n                            // remove the least recent transaction item\r\n                            transactionDataArray.pop();\r\n                        }\r\n\r\n                        transactionDataArray.unshift(transactionDataObject); // add the new transaction data object to the beginning of the array collection\r\n                        // store the updated transaction history collection securely on user's device\r\n                        return intel.security.secureData.createFromData({'data': JSON.stringify(transactionDataArray)});\r\n                    }).\r\n                    then(function(instanceId){\r\n                        return intel.security.secureStorage.write({'id':'postcash-transaction-history-collection',\r\n                            'instanceID': instanceId });\r\n                    }).\r\n                    then(function(){ // new transaction object has been added\r\n                        // resolve promise\r\n                        resolve();\r\n                    }).\r\n                    catch(function(err){ // there was an error and account could NOT be added\r\n                        reject(err); // reject promise\r\n                    });\r\n                });\r\n            },\r\n\r\n            /**\r\n             * method is used update the status of a stored transaction history on\r\n             * the user's device\r\n             *\r\n             * @param transactionRef {String} the unique moneywave reference for the transaction\r\n             *\r\n             * @param newStatus {String} the new status for the transaction\r\n             */\r\n            updateTransactionHistory: function(transactionRef, newStatus){\r\n\r\n                // return a Promise which resolves when transaction history data status has been updated successfully or rejects otherwise\r\n                return new Promise(function(resolve, reject){\r\n                    // get the transaction history data collection on the user's device\r\n                    Promise.resolve(intel.security.secureStorage.read({'id':'postcash-transaction-history-collection'})).\r\n                    then(function(instanceId){\r\n                        return Promise.resolve(intel.security.secureData.getData(instanceId));\r\n                    }, function(errObject){\r\n                        if(errObject.code == 1){ // the secure storage has not been created before\r\n                            return '[]'; // return the empty array as string\r\n                        }\r\n                        else{ // another error occurred (which is considered severe)\r\n                            throw errObject;\r\n                        }\r\n                    }).\r\n                    then(function(transactionDataArray){\r\n                        transactionDataArray = JSON.parse(transactionDataArray); // convert the string data to an object\r\n                        // find the specified transaction using the provided movewave reference\r\n                        var transactionDataIndex = transactionDataArray.findIndex(function(arrayElem){\r\n                            if(arrayElem.flutterChargeReference == transactionRef){\r\n                                return true;\r\n                            }\r\n                        });\r\n\r\n                        // if element was found, update the transaction status with the newStatus provided\r\n                        if(transactionDataIndex > -1) { // transaction data object was found\r\n                            // update the transaction status\r\n                            transactionDataArray[transactionDataIndex].flutterChargeResponseMessage = newStatus;\r\n                        }\r\n\r\n\r\n                        // store the updated transaction history collection securely on user's device\r\n                        return intel.security.secureData.createFromData({'data': JSON.stringify(transactionDataArray)});\r\n                    }).\r\n                    then(function(instanceId){\r\n                        return intel.security.secureStorage.write({'id':'postcash-transaction-history-collection',\r\n                            'instanceID': instanceId });\r\n                    }).\r\n                    then(function(){ // new transaction object has been added\r\n                        // resolve promise\r\n                        resolve();\r\n                    }).\r\n                    catch(function(err){ // there was an error and account could NOT be added\r\n                        reject(err); // reject promise\r\n                    });\r\n                });\r\n            }\r\n        }\r\n\r\n    }\r\n};\r\n"]}